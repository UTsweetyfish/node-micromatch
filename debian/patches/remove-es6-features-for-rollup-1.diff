Description: remove some ES6 features not compatible with rollup 1
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2020-04-23

--- a/index.js
+++ b/index.js
@@ -41,7 +41,10 @@
   };
 
   for (let i = 0; i < patterns.length; i++) {
-    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
+    var tmp = {}
+    if(typeof options == 'object') Object.keys(options).forEach(function(k){ tmp[k] = options[k]});
+    tmp.onResult = onResult;
+    let isMatch = picomatch(String(patterns[i]), tmp, true);
     let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
     if (negated) negatives++;
 
@@ -155,7 +158,10 @@
     items.push(state.output);
   };
 
-  let matches = micromatch(list, patterns, { ...options, onResult });
+  var tmp = {}
+  if(typeof options == 'object') Object.keys(options).forEach(function(k){ tmp[k] = options[k]});
+  tmp.onResult = onResult;
+  let matches = micromatch(list, patterns, tmp);
 
   for (let item of items) {
     if (!matches.includes(item)) {
@@ -204,7 +210,10 @@
     }
   }
 
-  return micromatch.isMatch(str, pattern, { ...options, contains: true });
+  var tmp = {}
+  if(typeof options == 'object') Object.keys(options).forEach(function(k){ tmp[k] = options[k]});
+  tmp.contains = true
+  return micromatch.isMatch(str, pattern, tmp);
 };
 
 /**
@@ -360,7 +369,10 @@
 
 micromatch.capture = (glob, input, options) => {
   let posix = utils.isWindows(options);
-  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
+  var tmp = {}
+  if(typeof options == 'object') Object.keys(options).forEach(function(k){ tmp[k] = options[k]});
+  tmp.capture = true
+  let regex = picomatch.makeRe(String(glob), tmp);
   let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
 
   if (match) {
@@ -457,7 +469,10 @@
 
 micromatch.braceExpand = (pattern, options) => {
   if (typeof pattern !== 'string') throw new TypeError('Expected a string');
-  return micromatch.braces(pattern, { ...options, expand: true });
+  var tmp = {}
+  if(typeof options == 'object') Object.keys(options).forEach(function(k){ tmp[k] = options[k]});
+  tmp.expand = true
+  return micromatch.braces(pattern, tmp);
 };
 
 /**
